const path = require('path');

const LoadablePlugin = require('@loadable/webpack-plugin');
const CircularDependencyPlugin = require('circular-dependency-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const BundleAnalyzerPlugin = require('webpack-bundle-analyzer').BundleAnalyzerPlugin;

// const ReactRefreshPlugin = require('@pmmmwh/react-refresh-webpack-plugin');

function patchMiniCssExtractorOptions({ plugins }) {
  const plugin = plugins.find(plugin => plugin instanceof MiniCssExtractPlugin);

  if (plugin) {
    plugin.options.ignoreOrder = true;
  }
}

function addPlugins({ config, isNode, isDev }) {
  const buildPath = path.resolve('build');
  const copyPluginIndex = config.plugins.findIndex(item => item.constructor.name === 'CopyPlugin');

  if (copyPluginIndex !== -1) {
    config.plugins[copyPluginIndex].patterns[0].globOptions.dot = true;
  }

  if (!isNode) {
    config.plugins.push(
      new LoadablePlugin({
        outputAsset: false,
        writeToDisk: { filename: buildPath },
      }),
    );

    if (process.env.ANALYZE) {
      config.plugins.push(new BundleAnalyzerPlugin());
    }

    if (isDev) {
      config.plugins.push(
        new CircularDependencyPlugin({
          failOnError: true,
          exclude: /node_modules/,
          // `onStart` is called before the cycle detection starts
          onStart() {
            console.log('start detecting webpack modules cycles');
          },
          // `onDetected` is called for each module that is cyclical
          onDetected({ paths, compilation }) {
            // `paths` will be an Array of the relative module paths that make up the cycle
            // `module` will be the module record generated by webpack that caused the cycle
            compilation.errors.push(new Error(paths.join(' -> ')));
          },
          // `onEnd` is called before the cycle detection ends
          onEnd() {
            console.error('end detecting webpack modules cycles');
          },
        }),
      );
    }
  }

  // TODO: пока криво работает, релоад нужно настраивать
  // if (isDev) {
  //   config.plugins.push(new ReactRefreshPlugin());
  // }

  patchMiniCssExtractorOptions(config);

  return { config, isNode, isDev };
}

module.exports = { addPlugins };
